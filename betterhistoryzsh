# === Historique enrichi ZSH avec contexte dynamique et erreurs ===

# Configuration de l’historique Zsh
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=10000
export SAVEHIST=20000
FAIL_LOG="$HOME/.zsh_failures.log"

setopt APPEND_HISTORY
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_SPACE
unsetopt HIST_IGNORE_ALL_DUPS  # désactivé pour garder tous les ls -la

# Variable temporaire
zsh_last_command=""
zsh_last_exit_code=0

# Fonction de détection du contexte (évaluée dynamiquement à chaque fois)
zsh_context() {
  if [[ -n "$CONTAINER_ID" ]]; then
    if [[ "$CONTAINER_ID" == "host" ]]; then
      echo "host-distro"
    else
      echo "$CONTAINER_ID"
    fi
  else
    echo "host"
  fi
}

# Capture la commande juste avant son exécution
preexec() {
  zsh_last_command="$1"
}

# Juste après exécution de la commande
precmd() {
  local CONTEXT=$(zsh_context)
  local TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
  local HISTORY_TAG="# $TIMESTAMP - $CONTEXT"
  local LAST_LINE="$(tail -n 1 "$HISTFILE" 2>/dev/null || echo "")"

  if [[ -n "$zsh_last_command" ]]; then
    # Ajoute le tag s'il change
    if [[ "$LAST_LINE" != "$HISTORY_TAG" ]]; then
      echo "$HISTORY_TAG" >> "$HISTFILE"
    fi

    echo "$zsh_last_command" >> "$HISTFILE"

    # Vérifie le code retour réel de la commande précédente
    zsh_last_exit_code=$?

    if [[ "$zsh_last_exit_code" -ne 0 ]]; then
      echo "[$TIMESTAMP] [$CONTEXT] $zsh_last_command  # exit=$zsh_last_exit_code" >> "$FAIL_LOG"
    fi
  fi

  # Réinitialise
  unset zsh_last_command
  zsh_last_exit_code=0
}